<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function simple_megamenu_bonus_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  $fields = array();

  if ($entity_type->id() === 'simple_mega_menu') {
    $viewModes = \Drupal::service('entity_display.repository')->getViewModes($entity_type->id());
    $viewModeOptions = array('default' => t('Default'));
    if(!empty($viewModes)){
      foreach($viewModes as $key => $viewMode){
        $viewModeOptions[$key] = $viewMode['label'];
      }
    }
    $fields['render_view_mode'] = \Drupal\Core\Field\BaseFieldDefinition::create('list_string')
      ->setLabel(t('View mode'))
      ->setDescription(t('Select the view mode to use when rendering this mega menu item.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(FALSE)
      ->setRequired(TRUE)
      ->setSettings([
        'default_value' => 'default',
        'allowed_values' => $viewModeOptions,
        'max_length' => 255,
      ])
      ->setDisplayOptions('form', array(
        'type' => 'select',
        'weight' => -1,
        'required' => TRUE,
      ))
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'weight' => 99,
        'type' => 'hidden'
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['menu_item_below_subtree'] = \Drupal\Core\Field\BaseFieldDefinition::create('string')
      ->setLabel(t('Submenu (menu items below)'))
      ->setDescription(t('Output of the below menu items (submenu).'))
      ->setComputed(TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'weight' => 1,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', FALSE);
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function simple_megamenu_bonus_simple_mega_menu_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('menu_below_items_tree')) {
    if(!empty($build['menu_below_items_tree'])){
      // The value is set within twig. We just have to set the type here.
      $build['menu_item_below_subtree'] = [
        '#type' => 'markup',
      ];
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function simple_megamenu_bonus_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // TODO: Remove this entire function when this issue has been fixed: https://www.drupal.org/node/2917431#comment-12306644
  if (!isset($variables['menu_name'])) {
    return;
  }
  $menu_name = $variables['menu_name'];

  /* @var \Drupal\simple_megamenu\SimpleMegaMenuHelperInterface $simple_megamenu_helper */
  $simple_megamenu_helper = \Drupal::service('simple_megamenu.helper');
  if ($simple_mega_menu_types = $simple_megamenu_helper->getMegaMenuTypeWhichTargetMenu($menu_name)) {
    // We add the default suggestion removed in hook_preprocess_block.
    if(!empty($variables['menu_block_configuration']['suggestion'])){
      $menu_block_suggestion = $variables['menu_block_configuration']['suggestion'];
      $menu_block_suggestion_sanitized = strtr($menu_block_suggestion, '-', '_');
      $suggestions[] = 'menu__simple_megamenu__' . $menu_block_suggestion;
    }
  }
}
